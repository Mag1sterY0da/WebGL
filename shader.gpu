

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texCoord;
varying vec2 texCoordV;
uniform mat4 ModelViewProjectionMatrix;
uniform bool drawSphere;

void main() {
    texCoordV=texCoord;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
uniform vec4 color;
uniform sampler2D tmu;
varying vec2 texCoordV;
uniform bool drawSphere;
void main() {
   if (drawSphere) {
        gl_FragColor = color;
      } else {
        gl_FragColor = texture2D(tmu, texCoordV);
      }
}`;